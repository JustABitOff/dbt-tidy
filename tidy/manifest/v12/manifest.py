# generated by datamodel-codegen:
#   filename:  https://schemas.getdbt.com/dbt/manifest/v12.json

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, constr


class ManifestMetadata(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dbt_schema_version: Optional[str] = None
    dbt_version: Optional[str] = '1.10.0a1'
    generated_at: Optional[str] = None
    invocation_id: Optional[str] = None
    invocation_started_at: Optional[str] = None
    env: Optional[Dict[str, str]] = None
    project_name: Optional[str] = Field(None, description='Name of the root project')
    project_id: Optional[str] = Field(
        None,
        description='A unique identifier for the project, hashed from the project name',
    )
    user_id: Optional[UUID] = Field(
        None, description='A unique identifier for the user'
    )
    send_anonymous_usage_stats: Optional[bool] = Field(
        None, description='Whether dbt is configured to send anonymous usage statistics'
    )
    adapter_type: Optional[str] = Field(
        None, description='The type name of the adapter'
    )


class FileHash(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    checksum: str


class Hook(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sql: str
    transaction: Optional[bool] = True
    index: Optional[int] = None


class OnConfigurationChange(Enum):
    apply = 'apply'
    continue_ = 'continue'
    fail = 'fail'


class Docs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    show: Optional[bool] = True
    node_color: Optional[str] = None


class ContractConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True


class SeedConfig(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    enabled: Optional[bool] = True
    alias: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')
    database: Optional[str] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    materialized: Optional[str] = 'seed'
    incremental_strategy: Optional[str] = None
    batch_size: Optional[Any] = None
    lookback: Optional[Any] = 1
    begin: Optional[Any] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[Hook]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[Hook]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[bool] = None
    unique_key: Optional[Union[str, List[str]]] = None
    on_schema_change: Optional[str] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    contract: Optional[ContractConfig] = Field(None, title='ContractConfig')
    event_time: Optional[Any] = None
    concurrent_batches: Optional[Any] = None
    delimiter: Optional[str] = ','
    quote_columns: Optional[bool] = None


class Type(Enum):
    check = 'check'
    not_null = 'not_null'
    unique = 'unique'
    primary_key = 'primary_key'
    foreign_key = 'foreign_key'
    custom = 'custom'


class ColumnLevelConstraint(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type
    name: Optional[str] = None
    expression: Optional[str] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True
    to: Optional[str] = None
    to_columns: Optional[List[str]] = None


class Granularity(Enum):
    nanosecond = 'nanosecond'
    microsecond = 'microsecond'
    millisecond = 'millisecond'
    second = 'second'
    minute = 'minute'
    hour = 'hour'
    day = 'day'
    week = 'week'
    month = 'month'
    quarter = 'quarter'
    year = 'year'


class ColumnInfo(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class MacroDependsOn(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    macros: Optional[List[str]] = None


class ResourceType(Enum):
    model = 'model'
    analysis = 'analysis'
    test = 'test'
    snapshot = 'snapshot'
    operation = 'operation'
    seed = 'seed'
    rpc = 'rpc'
    sql_operation = 'sql_operation'
    doc = 'doc'
    source = 'source'
    macro = 'macro'
    exposure = 'exposure'
    metric = 'metric'
    group = 'group'
    saved_query = 'saved_query'
    semantic_model = 'semantic_model'
    unit_test = 'unit_test'
    fixture = 'fixture'


class NodeConfig(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    enabled: Optional[bool] = True
    alias: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')
    database: Optional[str] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[str] = None
    batch_size: Optional[Any] = None
    lookback: Optional[Any] = 1
    begin: Optional[Any] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[Hook]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[Hook]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[bool] = None
    unique_key: Optional[Union[str, List[str]]] = None
    on_schema_change: Optional[str] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    contract: Optional[ContractConfig] = Field(None, title='ContractConfig')
    event_time: Optional[Any] = None
    concurrent_batches: Optional[Any] = None


class DeferRelation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    alias: str
    relation_name: Optional[str] = None
    resource_type: ResourceType
    name: str
    description: str
    compiled_code: Optional[str] = None
    meta: Dict[str, Any]
    tags: List[str]
    config: Optional[NodeConfig] = None


class Seed(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['seed']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: Optional[SeedConfig] = Field(None, title='SeedConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    root_path: Optional[str] = None
    depends_on: Optional[MacroDependsOn] = Field(None, title='MacroDependsOn')
    defer_relation: Optional[DeferRelation] = None


class NodeConfig1(NodeConfig):
    pass


class ColumnLevelConstraint1(ColumnLevelConstraint):
    pass


class ColumnInfo1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint1]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class RefArgs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    package: Optional[str] = None
    version: Optional[Union[str, float]] = None


class DependsOn(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    macros: Optional[List[str]] = None
    nodes: Optional[List[str]] = None


class InjectedCTE(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str
    sql: str


class Contract(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enforced: Optional[bool] = False
    alias_types: Optional[bool] = True
    checksum: Optional[str] = None


class Analysis(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['analysis']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: Optional[NodeConfig1] = Field(None, title='NodeConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo1]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn] = Field(None, title='DependsOn')
    compiled_path: Optional[str] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[str] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    field_pre_injected_sql: Optional[str] = Field(None, alias='_pre_injected_sql')
    contract: Optional[Contract] = Field(None, title='Contract')


class TestConfig(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    enabled: Optional[bool] = True
    alias: Optional[str] = None
    schema_: Optional[str] = Field('dbt_test__audit', alias='schema')
    database: Optional[str] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    materialized: Optional[str] = 'test'
    severity: Optional[constr(pattern=r'^([Ww][Aa][Rr][Nn]|[Ee][Rr][Rr][Oo][Rr])$')] = (
        'ERROR'
    )
    store_failures: Optional[bool] = None
    store_failures_as: Optional[str] = None
    where: Optional[str] = None
    limit: Optional[int] = None
    fail_calc: Optional[str] = 'count(*)'
    warn_if: Optional[str] = '!= 0'
    error_if: Optional[str] = '!= 0'


class ColumnLevelConstraint2(ColumnLevelConstraint):
    pass


class ColumnInfo2(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint2]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class SingularTest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['test']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: Optional[TestConfig] = Field(None, title='TestConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo2]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn] = Field(None, title='DependsOn')
    compiled_path: Optional[str] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[str] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    field_pre_injected_sql: Optional[str] = Field(None, alias='_pre_injected_sql')
    contract: Optional[Contract] = Field(None, title='Contract')


class NodeConfig2(NodeConfig):
    pass


class ColumnLevelConstraint3(ColumnLevelConstraint):
    pass


class ColumnInfo3(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint3]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class HookNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['operation']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: Optional[NodeConfig2] = Field(None, title='NodeConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo3]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn] = Field(None, title='DependsOn')
    compiled_path: Optional[str] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[str] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    field_pre_injected_sql: Optional[str] = Field(None, alias='_pre_injected_sql')
    contract: Optional[Contract] = Field(None, title='Contract')
    index: Optional[int] = None


class Access(Enum):
    private = 'private'
    protected = 'protected'
    public = 'public'


class ModelConfig(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    enabled: Optional[bool] = True
    alias: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')
    database: Optional[str] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    materialized: Optional[str] = 'view'
    incremental_strategy: Optional[str] = None
    batch_size: Optional[Any] = None
    lookback: Optional[Any] = 1
    begin: Optional[Any] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[Hook]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[Hook]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[bool] = None
    unique_key: Optional[Union[str, List[str]]] = None
    on_schema_change: Optional[str] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    contract: Optional[ContractConfig] = Field(None, title='ContractConfig')
    event_time: Optional[Any] = None
    concurrent_batches: Optional[Any] = None
    access: Optional[Access] = 'protected'


class ColumnLevelConstraint4(ColumnLevelConstraint):
    pass


class ColumnInfo4(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint4]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class ModelLevelConstraint(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    type: Type
    name: Optional[str] = None
    expression: Optional[str] = None
    warn_unenforced: Optional[bool] = True
    warn_unsupported: Optional[bool] = True
    to: Optional[str] = None
    to_columns: Optional[List[str]] = None
    columns: Optional[List[str]] = None


class NodeConfig3(NodeConfig):
    pass


class DeferRelation1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    alias: str
    relation_name: Optional[str] = None
    resource_type: ResourceType
    name: str
    description: str
    compiled_code: Optional[str] = None
    meta: Dict[str, Any]
    tags: List[str]
    config: Optional[NodeConfig3] = None


class CustomGranularity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    column_name: Optional[str] = None


class TimeSpine(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    standard_granularity_column: str
    custom_granularities: Optional[List[CustomGranularity]] = None


class DependsOn4(Enum):
    all = 'all'
    any = 'any'


class Period(Enum):
    minute = 'minute'
    hour = 'hour'
    day = 'day'


class ModelBuildAfter(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    depends_on: Optional[DependsOn4] = 'any'
    count: Optional[int] = 0
    period: Optional[Period] = 'hour'


class ModelFreshness(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    build_after: Optional[ModelBuildAfter] = Field(None, title='ModelBuildAfter')


class Model(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['model']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: Optional[ModelConfig] = Field(None, title='ModelConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo4]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn] = Field(None, title='DependsOn')
    compiled_path: Optional[str] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[str] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    field_pre_injected_sql: Optional[str] = Field(None, alias='_pre_injected_sql')
    contract: Optional[Contract] = Field(None, title='Contract')
    access: Optional[Access] = 'protected'
    constraints: Optional[List[ModelLevelConstraint]] = None
    version: Optional[Union[str, float]] = None
    latest_version: Optional[Union[str, float]] = None
    deprecation_date: Optional[str] = None
    defer_relation: Optional[DeferRelation1] = None
    primary_key: Optional[List[str]] = None
    time_spine: Optional[TimeSpine] = None
    freshness: Optional[ModelFreshness] = None


class NodeConfig4(NodeConfig):
    pass


class ColumnLevelConstraint5(ColumnLevelConstraint):
    pass


class ColumnInfo5(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint5]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class DependsOn5(DependsOn):
    pass


class SqlOperation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['sql_operation']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: Optional[NodeConfig4] = Field(None, title='NodeConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo5]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn5] = Field(None, title='DependsOn')
    compiled_path: Optional[str] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[str] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    field_pre_injected_sql: Optional[str] = Field(None, alias='_pre_injected_sql')
    contract: Optional[Contract] = Field(None, title='Contract')


class ColumnLevelConstraint6(ColumnLevelConstraint):
    pass


class ColumnInfo6(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint6]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class TestMetadata(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[str] = 'test'
    kwargs: Optional[Dict[str, Any]] = None
    namespace: Optional[str] = None


class GenericTest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['test']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: Optional[TestConfig] = Field(None, title='TestConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo6]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn5] = Field(None, title='DependsOn')
    compiled_path: Optional[str] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[str] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    field_pre_injected_sql: Optional[str] = Field(None, alias='_pre_injected_sql')
    contract: Optional[Contract] = Field(None, title='Contract')
    column_name: Optional[str] = None
    file_key_name: Optional[str] = None
    attached_node: Optional[str] = None
    test_metadata: Optional[TestMetadata] = Field(None, title='TestMetadata')


class SnapshotMetaColumnNames(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dbt_valid_to: Optional[str] = None
    dbt_valid_from: Optional[str] = None
    dbt_scd_id: Optional[str] = None
    dbt_updated_at: Optional[str] = None
    dbt_is_deleted: Optional[str] = None


class SnapshotConfig(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    enabled: Optional[bool] = True
    alias: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')
    database: Optional[str] = None
    tags: Optional[Union[List[str], str]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    materialized: Optional[str] = 'snapshot'
    incremental_strategy: Optional[str] = None
    batch_size: Optional[Any] = None
    lookback: Optional[Any] = 1
    begin: Optional[Any] = None
    persist_docs: Optional[Dict[str, Any]] = None
    post_hook: Optional[List[Hook]] = Field(None, alias='post-hook')
    pre_hook: Optional[List[Hook]] = Field(None, alias='pre-hook')
    quoting: Optional[Dict[str, Any]] = None
    column_types: Optional[Dict[str, Any]] = None
    full_refresh: Optional[bool] = None
    unique_key: Optional[Union[str, List[str]]] = None
    on_schema_change: Optional[str] = 'ignore'
    on_configuration_change: Optional[OnConfigurationChange] = None
    grants: Optional[Dict[str, Any]] = None
    packages: Optional[List[str]] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    contract: Optional[ContractConfig] = Field(None, title='ContractConfig')
    event_time: Optional[Any] = None
    concurrent_batches: Optional[Any] = None
    strategy: Optional[str] = None
    target_schema: Optional[str] = None
    target_database: Optional[str] = None
    updated_at: Optional[str] = None
    check_cols: Optional[Union[str, List[str]]] = None
    snapshot_meta_column_names: Optional[SnapshotMetaColumnNames] = Field(
        None, title='SnapshotMetaColumnNames'
    )
    dbt_valid_to_current: Optional[str] = None


class ColumnLevelConstraint7(ColumnLevelConstraint):
    pass


class ColumnInfo7(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint7]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class NodeConfig5(NodeConfig):
    pass


class DeferRelation2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    alias: str
    relation_name: Optional[str] = None
    resource_type: ResourceType
    name: str
    description: str
    compiled_code: Optional[str] = None
    meta: Dict[str, Any]
    tags: List[str]
    config: Optional[NodeConfig5] = None


class Snapshot(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['snapshot']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: SnapshotConfig = Field(..., title='SnapshotConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo7]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn5] = Field(None, title='DependsOn')
    compiled_path: Optional[str] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[str] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    field_pre_injected_sql: Optional[str] = Field(None, alias='_pre_injected_sql')
    contract: Optional[Contract] = Field(None, title='Contract')
    defer_relation: Optional[DeferRelation2] = None


class Quoting(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[bool] = None
    schema_: Optional[bool] = Field(None, alias='schema')
    identifier: Optional[bool] = None
    column: Optional[bool] = None


class Time(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    count: Optional[int] = None
    period: Optional[Period] = None


class Time1(Time):
    pass


class FreshnessThreshold(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    warn_after: Optional[Time] = None
    error_after: Optional[Time1] = None
    filter: Optional[str] = None


class ExternalPartition(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    name: Optional[str] = ''
    description: Optional[str] = ''
    data_type: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None


class ExternalTable(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    location: Optional[str] = None
    file_format: Optional[str] = None
    row_format: Optional[str] = None
    tbl_properties: Optional[str] = None
    partitions: Optional[Union[List[str], List[ExternalPartition]]] = None


class ColumnLevelConstraint8(ColumnLevelConstraint):
    pass


class ColumnInfo8(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint8]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class SourceConfig(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    enabled: Optional[bool] = True
    event_time: Optional[Any] = None


class SourceDefinition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['source']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    source_name: str
    source_description: str
    loader: str
    identifier: str
    quoting: Optional[Quoting] = Field(None, title='Quoting')
    loaded_at_field: Optional[str] = None
    loaded_at_query: Optional[str] = None
    freshness: Optional[FreshnessThreshold] = None
    external: Optional[ExternalTable] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo8]] = None
    meta: Optional[Dict[str, Any]] = None
    source_meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[SourceConfig] = Field(None, title='SourceConfig')
    patch_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    created_at: Optional[float] = None
    unrendered_database: Optional[str] = None
    unrendered_schema: Optional[str] = None
    doc_blocks: Optional[List[str]] = None


class MacroArgument(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    type: Optional[str] = None
    description: Optional[str] = ''


class SupportedLanguage(Enum):
    python = 'python'
    sql = 'sql'


class Macro(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    resource_type: Literal['macro']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    macro_sql: str
    depends_on: Optional[MacroDependsOn] = Field(None, title='MacroDependsOn')
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    arguments: Optional[List[MacroArgument]] = None
    created_at: Optional[float] = None
    supported_languages: Optional[List[SupportedLanguage]] = None


class Documentation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    resource_type: Literal['doc']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    block_contents: str


class Type10(Enum):
    dashboard = 'dashboard'
    notebook = 'notebook'
    analysis = 'analysis'
    ml = 'ml'
    application = 'application'


class Owner(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    email: Optional[Union[str, List[str]]] = None
    name: Optional[str] = None


class Maturity(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'


class ExposureConfig(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    enabled: Optional[bool] = True


class Exposure(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    resource_type: Literal['exposure']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    type: Type10
    owner: Owner = Field(..., title='Owner')
    description: Optional[str] = ''
    label: Optional[str] = None
    maturity: Optional[Maturity] = None
    meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[ExposureConfig] = Field(None, title='ExposureConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    url: Optional[str] = None
    depends_on: Optional[DependsOn5] = Field(None, title='DependsOn')
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    created_at: Optional[float] = None


class Type11(Enum):
    simple = 'simple'
    ratio = 'ratio'
    cumulative = 'cumulative'
    derived = 'derived'
    conversion = 'conversion'


class WhereFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    where_sql_template: str


class WhereFilterIntersection(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    where_filters: List[WhereFilter]


class MetricInputMeasure(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    filter: Optional[WhereFilterIntersection] = None
    alias: Optional[str] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[int] = None


class WhereFilterIntersection1(WhereFilterIntersection):
    pass


class MetricInputMeasure1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    filter: Optional[WhereFilterIntersection1] = None
    alias: Optional[str] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[int] = None


class WhereFilterIntersection2(WhereFilterIntersection):
    pass


class MetricTimeWindow(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    count: int
    granularity: str


class MetricInput(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    filter: Optional[WhereFilterIntersection2] = None
    alias: Optional[str] = None
    offset_window: Optional[MetricTimeWindow] = None
    offset_to_grain: Optional[str] = None


class WhereFilterIntersection3(WhereFilterIntersection):
    pass


class MetricInput1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    filter: Optional[WhereFilterIntersection3] = None
    alias: Optional[str] = None
    offset_window: Optional[MetricTimeWindow] = None
    offset_to_grain: Optional[str] = None


class WhereFilterIntersection4(WhereFilterIntersection):
    pass


class MetricInput2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    filter: Optional[WhereFilterIntersection4] = None
    alias: Optional[str] = None
    offset_window: Optional[MetricTimeWindow] = None
    offset_to_grain: Optional[str] = None


class WhereFilterIntersection5(WhereFilterIntersection):
    pass


class MetricInputMeasure2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    filter: Optional[WhereFilterIntersection5] = None
    alias: Optional[str] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[int] = None


class WhereFilterIntersection6(WhereFilterIntersection):
    pass


class MetricInputMeasure3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    filter: Optional[WhereFilterIntersection6] = None
    alias: Optional[str] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[int] = None


class Calculation(Enum):
    conversions = 'conversions'
    conversion_rate = 'conversion_rate'


class ConstantPropertyInput(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    base_property: str
    conversion_property: str


class ConversionTypeParams(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    base_measure: MetricInputMeasure2 = Field(..., title='MetricInputMeasure')
    conversion_measure: MetricInputMeasure3 = Field(..., title='MetricInputMeasure')
    entity: str
    calculation: Optional[Calculation] = 'conversion_rate'
    window: Optional[MetricTimeWindow] = None
    constant_properties: Optional[List[ConstantPropertyInput]] = None


class PeriodAgg(Enum):
    first = 'first'
    last = 'last'
    average = 'average'


class CumulativeTypeParams(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    window: Optional[MetricTimeWindow] = None
    grain_to_date: Optional[str] = None
    period_agg: Optional[PeriodAgg] = 'first'


class MetricTypeParams(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    measure: Optional[MetricInputMeasure] = None
    input_measures: Optional[List[MetricInputMeasure1]] = None
    numerator: Optional[MetricInput] = None
    denominator: Optional[MetricInput1] = None
    expr: Optional[str] = None
    window: Optional[MetricTimeWindow] = None
    grain_to_date: Optional[Granularity] = None
    metrics: Optional[List[MetricInput2]] = None
    conversion_type_params: Optional[ConversionTypeParams] = None
    cumulative_type_params: Optional[CumulativeTypeParams] = None


class WhereFilterIntersection7(WhereFilterIntersection):
    pass


class FileSlice(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    filename: str
    content: str
    start_line_number: int
    end_line_number: int


class SourceFileMetadata(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    repo_file_path: str
    file_slice: FileSlice = Field(..., title='FileSlice')


class MetricConfig(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    enabled: Optional[bool] = True
    group: Optional[str] = None
    meta: Optional[Dict[str, Any]] = None


class Metric(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    resource_type: Literal['metric']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    description: str
    label: str
    type: Type11
    type_params: MetricTypeParams = Field(..., title='MetricTypeParams')
    filter: Optional[WhereFilterIntersection7] = None
    metadata: Optional[SourceFileMetadata] = None
    time_granularity: Optional[str] = None
    meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[MetricConfig] = Field(None, title='MetricConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    sources: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn5] = Field(None, title='DependsOn')
    refs: Optional[List[RefArgs]] = None
    metrics: Optional[List[List[str]]] = None
    created_at: Optional[float] = None
    group: Optional[str] = None


class Group(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    resource_type: Literal['group']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    owner: Owner = Field(..., title='Owner')


class SeedConfig1(SeedConfig):
    pass


class ColumnLevelConstraint9(ColumnLevelConstraint):
    pass


class ColumnInfo9(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint9]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class NodeConfig6(NodeConfig):
    pass


class DeferRelation3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    alias: str
    relation_name: Optional[str] = None
    resource_type: ResourceType
    name: str
    description: str
    compiled_code: Optional[str] = None
    meta: Dict[str, Any]
    tags: List[str]
    config: Optional[NodeConfig6] = None


class Seed1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['seed']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: Optional[SeedConfig1] = Field(None, title='SeedConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo9]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    root_path: Optional[str] = None
    depends_on: Optional[MacroDependsOn] = Field(None, title='MacroDependsOn')
    defer_relation: Optional[DeferRelation3] = None


class NodeConfig7(NodeConfig):
    pass


class ColumnLevelConstraint10(ColumnLevelConstraint):
    pass


class ColumnInfo10(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint10]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class Analysis1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['analysis']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: Optional[NodeConfig7] = Field(None, title='NodeConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo10]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn5] = Field(None, title='DependsOn')
    compiled_path: Optional[str] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[str] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    field_pre_injected_sql: Optional[str] = Field(None, alias='_pre_injected_sql')
    contract: Optional[Contract] = Field(None, title='Contract')


class ColumnLevelConstraint11(ColumnLevelConstraint):
    pass


class ColumnInfo11(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint11]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class SingularTest1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['test']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: Optional[TestConfig] = Field(None, title='TestConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo11]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn5] = Field(None, title='DependsOn')
    compiled_path: Optional[str] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[str] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    field_pre_injected_sql: Optional[str] = Field(None, alias='_pre_injected_sql')
    contract: Optional[Contract] = Field(None, title='Contract')


class NodeConfig8(NodeConfig):
    pass


class ColumnLevelConstraint12(ColumnLevelConstraint):
    pass


class ColumnInfo12(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint12]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class HookNode1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['operation']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: Optional[NodeConfig8] = Field(None, title='NodeConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo12]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn5] = Field(None, title='DependsOn')
    compiled_path: Optional[str] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[str] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    field_pre_injected_sql: Optional[str] = Field(None, alias='_pre_injected_sql')
    contract: Optional[Contract] = Field(None, title='Contract')
    index: Optional[int] = None


class ModelConfig1(ModelConfig):
    pass


class ColumnLevelConstraint13(ColumnLevelConstraint):
    pass


class ColumnInfo13(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint13]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class ModelLevelConstraint1(ModelLevelConstraint):
    pass


class NodeConfig9(NodeConfig):
    pass


class DeferRelation4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    alias: str
    relation_name: Optional[str] = None
    resource_type: ResourceType
    name: str
    description: str
    compiled_code: Optional[str] = None
    meta: Dict[str, Any]
    tags: List[str]
    config: Optional[NodeConfig9] = None


class TimeSpine1(TimeSpine):
    pass


class ModelBuildAfter1(ModelBuildAfter):
    pass


class ModelFreshness1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    build_after: Optional[ModelBuildAfter1] = Field(None, title='ModelBuildAfter')


class Model1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['model']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: Optional[ModelConfig1] = Field(None, title='ModelConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo13]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn5] = Field(None, title='DependsOn')
    compiled_path: Optional[str] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[str] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    field_pre_injected_sql: Optional[str] = Field(None, alias='_pre_injected_sql')
    contract: Optional[Contract] = Field(None, title='Contract')
    access: Optional[Access] = 'protected'
    constraints: Optional[List[ModelLevelConstraint1]] = None
    version: Optional[Union[str, float]] = None
    latest_version: Optional[Union[str, float]] = None
    deprecation_date: Optional[str] = None
    defer_relation: Optional[DeferRelation4] = None
    primary_key: Optional[List[str]] = None
    time_spine: Optional[TimeSpine1] = None
    freshness: Optional[ModelFreshness1] = None


class NodeConfig10(NodeConfig):
    pass


class ColumnLevelConstraint14(ColumnLevelConstraint):
    pass


class ColumnInfo14(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint14]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class DependsOn15(DependsOn):
    pass


class SqlOperation1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['sql_operation']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: Optional[NodeConfig10] = Field(None, title='NodeConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo14]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn15] = Field(None, title='DependsOn')
    compiled_path: Optional[str] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[str] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    field_pre_injected_sql: Optional[str] = Field(None, alias='_pre_injected_sql')
    contract: Optional[Contract] = Field(None, title='Contract')


class ColumnLevelConstraint15(ColumnLevelConstraint):
    pass


class ColumnInfo15(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint15]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class GenericTest1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['test']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: Optional[TestConfig] = Field(None, title='TestConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo15]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn15] = Field(None, title='DependsOn')
    compiled_path: Optional[str] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[str] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    field_pre_injected_sql: Optional[str] = Field(None, alias='_pre_injected_sql')
    contract: Optional[Contract] = Field(None, title='Contract')
    column_name: Optional[str] = None
    file_key_name: Optional[str] = None
    attached_node: Optional[str] = None
    test_metadata: Optional[TestMetadata] = Field(None, title='TestMetadata')


class SnapshotConfig1(SnapshotConfig):
    pass


class ColumnLevelConstraint16(ColumnLevelConstraint):
    pass


class ColumnInfo16(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint16]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class NodeConfig11(NodeConfig):
    pass


class DeferRelation5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    alias: str
    relation_name: Optional[str] = None
    resource_type: ResourceType
    name: str
    description: str
    compiled_code: Optional[str] = None
    meta: Dict[str, Any]
    tags: List[str]
    config: Optional[NodeConfig11] = None


class Snapshot1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['snapshot']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    alias: str
    checksum: FileHash = Field(..., title='FileHash')
    config: SnapshotConfig1 = Field(..., title='SnapshotConfig')
    tags: Optional[List[str]] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo16]] = None
    meta: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    docs: Optional[Docs] = Field(None, title='Docs')
    patch_path: Optional[str] = None
    build_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    created_at: Optional[float] = None
    config_call_dict: Optional[Dict[str, Any]] = None
    unrendered_config_call_dict: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    raw_code: Optional[str] = ''
    doc_blocks: Optional[List[str]] = None
    language: Optional[str] = 'sql'
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn15] = Field(None, title='DependsOn')
    compiled_path: Optional[str] = None
    compiled: Optional[bool] = False
    compiled_code: Optional[str] = None
    extra_ctes_injected: Optional[bool] = False
    extra_ctes: Optional[List[InjectedCTE]] = None
    field_pre_injected_sql: Optional[str] = Field(None, alias='_pre_injected_sql')
    contract: Optional[Contract] = Field(None, title='Contract')
    defer_relation: Optional[DeferRelation5] = None


class Time2(Time):
    pass


class Time3(Time):
    pass


class FreshnessThreshold1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    warn_after: Optional[Time2] = None
    error_after: Optional[Time3] = None
    filter: Optional[str] = None


class ExternalTable1(ExternalTable):
    pass


class ColumnLevelConstraint17(ColumnLevelConstraint):
    pass


class ColumnInfo17(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    name: str
    description: Optional[str] = ''
    meta: Optional[Dict[str, Any]] = None
    data_type: Optional[str] = None
    constraints: Optional[List[ColumnLevelConstraint17]] = None
    quote: Optional[bool] = None
    tags: Optional[List[str]] = None
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    granularity: Optional[Granularity] = None
    doc_blocks: Optional[List[str]] = None


class SourceDefinition1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: Optional[str] = None
    schema_: str = Field(..., alias='schema')
    name: str
    resource_type: Literal['source']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    source_name: str
    source_description: str
    loader: str
    identifier: str
    quoting: Optional[Quoting] = Field(None, title='Quoting')
    loaded_at_field: Optional[str] = None
    loaded_at_query: Optional[str] = None
    freshness: Optional[FreshnessThreshold1] = None
    external: Optional[ExternalTable1] = None
    description: Optional[str] = ''
    columns: Optional[Dict[str, ColumnInfo17]] = None
    meta: Optional[Dict[str, Any]] = None
    source_meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[SourceConfig] = Field(None, title='SourceConfig')
    patch_path: Optional[str] = None
    unrendered_config: Optional[Dict[str, Any]] = None
    relation_name: Optional[str] = None
    created_at: Optional[float] = None
    unrendered_database: Optional[str] = None
    unrendered_schema: Optional[str] = None
    doc_blocks: Optional[List[str]] = None


class Exposure1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    resource_type: Literal['exposure']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    type: Type10
    owner: Owner = Field(..., title='Owner')
    description: Optional[str] = ''
    label: Optional[str] = None
    maturity: Optional[Maturity] = None
    meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[ExposureConfig] = Field(None, title='ExposureConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    url: Optional[str] = None
    depends_on: Optional[DependsOn15] = Field(None, title='DependsOn')
    refs: Optional[List[RefArgs]] = None
    sources: Optional[List[List[str]]] = None
    metrics: Optional[List[List[str]]] = None
    created_at: Optional[float] = None


class WhereFilterIntersection8(WhereFilterIntersection):
    pass


class MetricInputMeasure4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    filter: Optional[WhereFilterIntersection8] = None
    alias: Optional[str] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[int] = None


class WhereFilterIntersection9(WhereFilterIntersection):
    pass


class MetricInputMeasure5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    filter: Optional[WhereFilterIntersection9] = None
    alias: Optional[str] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[int] = None


class WhereFilterIntersection10(WhereFilterIntersection):
    pass


class MetricInput3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    filter: Optional[WhereFilterIntersection10] = None
    alias: Optional[str] = None
    offset_window: Optional[MetricTimeWindow] = None
    offset_to_grain: Optional[str] = None


class WhereFilterIntersection11(WhereFilterIntersection):
    pass


class MetricInput4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    filter: Optional[WhereFilterIntersection11] = None
    alias: Optional[str] = None
    offset_window: Optional[MetricTimeWindow] = None
    offset_to_grain: Optional[str] = None


class WhereFilterIntersection12(WhereFilterIntersection):
    pass


class MetricInput5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    filter: Optional[WhereFilterIntersection12] = None
    alias: Optional[str] = None
    offset_window: Optional[MetricTimeWindow] = None
    offset_to_grain: Optional[str] = None


class WhereFilterIntersection13(WhereFilterIntersection):
    pass


class MetricInputMeasure6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    filter: Optional[WhereFilterIntersection13] = None
    alias: Optional[str] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[int] = None


class WhereFilterIntersection14(WhereFilterIntersection):
    pass


class MetricInputMeasure7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    filter: Optional[WhereFilterIntersection14] = None
    alias: Optional[str] = None
    join_to_timespine: Optional[bool] = False
    fill_nulls_with: Optional[int] = None


class ConversionTypeParams1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    base_measure: MetricInputMeasure6 = Field(..., title='MetricInputMeasure')
    conversion_measure: MetricInputMeasure7 = Field(..., title='MetricInputMeasure')
    entity: str
    calculation: Optional[Calculation] = 'conversion_rate'
    window: Optional[MetricTimeWindow] = None
    constant_properties: Optional[List[ConstantPropertyInput]] = None


class CumulativeTypeParams1(CumulativeTypeParams):
    pass


class MetricTypeParams1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    measure: Optional[MetricInputMeasure4] = None
    input_measures: Optional[List[MetricInputMeasure5]] = None
    numerator: Optional[MetricInput3] = None
    denominator: Optional[MetricInput4] = None
    expr: Optional[str] = None
    window: Optional[MetricTimeWindow] = None
    grain_to_date: Optional[Granularity] = None
    metrics: Optional[List[MetricInput5]] = None
    conversion_type_params: Optional[ConversionTypeParams1] = None
    cumulative_type_params: Optional[CumulativeTypeParams1] = None


class WhereFilterIntersection15(WhereFilterIntersection):
    pass


class SourceFileMetadata1(SourceFileMetadata):
    pass


class Metric1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    resource_type: Literal['metric']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    description: str
    label: str
    type: Type11
    type_params: MetricTypeParams1 = Field(..., title='MetricTypeParams')
    filter: Optional[WhereFilterIntersection15] = None
    metadata: Optional[SourceFileMetadata1] = None
    time_granularity: Optional[str] = None
    meta: Optional[Dict[str, Any]] = None
    tags: Optional[List[str]] = None
    config: Optional[MetricConfig] = Field(None, title='MetricConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    sources: Optional[List[List[str]]] = None
    depends_on: Optional[DependsOn15] = Field(None, title='DependsOn')
    refs: Optional[List[RefArgs]] = None
    metrics: Optional[List[List[str]]] = None
    created_at: Optional[float] = None
    group: Optional[str] = None


class WhereFilterIntersection16(WhereFilterIntersection):
    pass


class QueryParams(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metrics: List[str]
    group_by: List[str]
    where: Optional[WhereFilterIntersection16] = None
    order_by: Optional[List[str]] = None
    limit: Optional[int] = None


class ExportAs(Enum):
    table = 'table'
    view = 'view'


class ExportConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    export_as: ExportAs
    schema_name: Optional[str] = None
    alias: Optional[str] = None
    database: Optional[str] = None


class Export(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    config: ExportConfig = Field(..., title='ExportConfig')
    unrendered_config: Optional[Dict[str, str]] = None


class SourceFileMetadata2(SourceFileMetadata):
    pass


class SavedQueryCache(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: Optional[bool] = False


class SavedQueryConfig(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    enabled: Optional[bool] = True
    group: Optional[str] = None
    meta: Optional[Dict[str, Any]] = None
    export_as: Optional[ExportAs] = None
    schema_: Optional[str] = Field(None, alias='schema')
    cache: Optional[SavedQueryCache] = Field(None, title='SavedQueryCache')


class SavedQuery(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    resource_type: Literal['saved_query']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    query_params: QueryParams = Field(..., title='QueryParams')
    exports: List[Export]
    description: Optional[str] = None
    label: Optional[str] = None
    metadata: Optional[SourceFileMetadata2] = None
    config: Optional[SavedQueryConfig] = Field(None, title='SavedQueryConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    depends_on: Optional[DependsOn15] = Field(None, title='DependsOn')
    created_at: Optional[float] = None
    refs: Optional[List[RefArgs]] = None
    tags: Optional[Union[List[str], str]] = None


class NodeRelation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    alias: str
    schema_name: str
    database: Optional[str] = None
    relation_name: Optional[str] = ''


class Defaults(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    agg_time_dimension: Optional[str] = None


class Type24(Enum):
    foreign = 'foreign'
    natural = 'natural'
    primary = 'primary'
    unique = 'unique'


class SemanticLayerElementConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    meta: Optional[Dict[str, Any]] = None


class Entity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    type: Type24
    description: Optional[str] = None
    label: Optional[str] = None
    role: Optional[str] = None
    expr: Optional[str] = None
    config: Optional[SemanticLayerElementConfig] = None


class Agg(Enum):
    sum = 'sum'
    min = 'min'
    max = 'max'
    count_distinct = 'count_distinct'
    sum_boolean = 'sum_boolean'
    average = 'average'
    percentile = 'percentile'
    median = 'median'
    count = 'count'


class MeasureAggregationParameters(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    percentile: Optional[float] = None
    use_discrete_percentile: Optional[bool] = False
    use_approximate_percentile: Optional[bool] = False


class NonAdditiveDimension(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    window_choice: Agg
    window_groupings: List[str]


class Measure(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    agg: Agg
    description: Optional[str] = None
    label: Optional[str] = None
    create_metric: Optional[bool] = False
    expr: Optional[str] = None
    agg_params: Optional[MeasureAggregationParameters] = None
    non_additive_dimension: Optional[NonAdditiveDimension] = None
    agg_time_dimension: Optional[str] = None
    config: Optional[SemanticLayerElementConfig] = None


class Type25(Enum):
    categorical = 'categorical'
    time = 'time'


class DimensionValidityParams(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    is_start: Optional[bool] = False
    is_end: Optional[bool] = False


class DimensionTypeParams(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    time_granularity: Granularity
    validity_params: Optional[DimensionValidityParams] = None


class SourceFileMetadata3(SourceFileMetadata):
    pass


class Dimension(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    type: Type25
    description: Optional[str] = None
    label: Optional[str] = None
    is_partition: Optional[bool] = False
    type_params: Optional[DimensionTypeParams] = None
    expr: Optional[str] = None
    metadata: Optional[SourceFileMetadata3] = None
    config: Optional[SemanticLayerElementConfig] = None


class SourceFileMetadata4(SourceFileMetadata):
    pass


class SemanticModelConfig(MetricConfig):
    pass


class SemanticModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    resource_type: ResourceType
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    model: str
    node_relation: Optional[NodeRelation] = None
    description: Optional[str] = None
    label: Optional[str] = None
    defaults: Optional[Defaults] = None
    entities: Optional[List[Entity]] = None
    measures: Optional[List[Measure]] = None
    dimensions: Optional[List[Dimension]] = None
    metadata: Optional[SourceFileMetadata4] = None
    depends_on: Optional[DependsOn15] = Field(None, title='DependsOn')
    refs: Optional[List[RefArgs]] = None
    created_at: Optional[float] = None
    config: Optional[SemanticModelConfig] = Field(None, title='SemanticModelConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    primary_entity: Optional[str] = None
    group: Optional[str] = None


class Format(Enum):
    csv = 'csv'
    dict = 'dict'
    sql = 'sql'


class UnitTestInputFixture(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    input: str
    rows: Optional[Union[str, List[Dict[str, Any]]]] = None
    format: Optional[Format] = 'dict'
    fixture: Optional[str] = None


class UnitTestOutputFixture(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    rows: Optional[Union[str, List[Dict[str, Any]]]] = None
    format: Optional[Format] = 'dict'
    fixture: Optional[str] = None


class UnitTestOverrides(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    macros: Optional[Dict[str, Any]] = None
    vars: Optional[Dict[str, Any]] = None
    env_vars: Optional[Dict[str, Any]] = None


class UnitTestConfig(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    field_extra: Optional[Dict[str, Any]] = Field(None, alias='_extra')
    tags: Optional[Union[str, List[str]]] = None
    meta: Optional[Dict[str, Any]] = None
    enabled: Optional[bool] = True


class UnitTestNodeVersions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    include: Optional[List[Union[str, float]]] = None
    exclude: Optional[List[Union[str, float]]] = None


class UnitTestDefinition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    model: str
    given: List[UnitTestInputFixture]
    expect: UnitTestOutputFixture = Field(..., title='UnitTestOutputFixture')
    name: str
    resource_type: ResourceType
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    description: Optional[str] = ''
    overrides: Optional[UnitTestOverrides] = None
    depends_on: Optional[DependsOn15] = Field(None, title='DependsOn')
    config: Optional[UnitTestConfig] = Field(None, title='UnitTestConfig')
    checksum: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')
    created_at: Optional[float] = None
    versions: Optional[UnitTestNodeVersions] = None
    version: Optional[Union[str, float]] = None


class WhereFilterIntersection17(WhereFilterIntersection):
    pass


class QueryParams1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metrics: List[str]
    group_by: List[str]
    where: Optional[WhereFilterIntersection17] = None
    order_by: Optional[List[str]] = None
    limit: Optional[int] = None


class ExportConfig1(ExportConfig):
    pass


class Export1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    config: ExportConfig1 = Field(..., title='ExportConfig')
    unrendered_config: Optional[Dict[str, str]] = None


class SourceFileMetadata5(SourceFileMetadata):
    pass


class SavedQueryConfig1(SavedQueryConfig):
    pass


class SavedQuery1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    resource_type: Literal['saved_query']
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    query_params: QueryParams1 = Field(..., title='QueryParams')
    exports: List[Export1]
    description: Optional[str] = None
    label: Optional[str] = None
    metadata: Optional[SourceFileMetadata5] = None
    config: Optional[SavedQueryConfig1] = Field(None, title='SavedQueryConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    group: Optional[str] = None
    depends_on: Optional[DependsOn15] = Field(None, title='DependsOn')
    created_at: Optional[float] = None
    refs: Optional[List[RefArgs]] = None
    tags: Optional[Union[List[str], str]] = None


class Entity1(Entity):
    pass


class NonAdditiveDimension1(NonAdditiveDimension):
    pass


class Measure1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    agg: Agg
    description: Optional[str] = None
    label: Optional[str] = None
    create_metric: Optional[bool] = False
    expr: Optional[str] = None
    agg_params: Optional[MeasureAggregationParameters] = None
    non_additive_dimension: Optional[NonAdditiveDimension1] = None
    agg_time_dimension: Optional[str] = None
    config: Optional[SemanticLayerElementConfig] = None


class DimensionTypeParams1(DimensionTypeParams):
    pass


class SourceFileMetadata6(SourceFileMetadata):
    pass


class Dimension1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    type: Type25
    description: Optional[str] = None
    label: Optional[str] = None
    is_partition: Optional[bool] = False
    type_params: Optional[DimensionTypeParams1] = None
    expr: Optional[str] = None
    metadata: Optional[SourceFileMetadata6] = None
    config: Optional[SemanticLayerElementConfig] = None


class SourceFileMetadata7(SourceFileMetadata):
    pass


class SemanticModel1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    resource_type: ResourceType
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    model: str
    node_relation: Optional[NodeRelation] = None
    description: Optional[str] = None
    label: Optional[str] = None
    defaults: Optional[Defaults] = None
    entities: Optional[List[Entity1]] = None
    measures: Optional[List[Measure1]] = None
    dimensions: Optional[List[Dimension1]] = None
    metadata: Optional[SourceFileMetadata7] = None
    depends_on: Optional[DependsOn15] = Field(None, title='DependsOn')
    refs: Optional[List[RefArgs]] = None
    created_at: Optional[float] = None
    config: Optional[SemanticModelConfig] = Field(None, title='SemanticModelConfig')
    unrendered_config: Optional[Dict[str, Any]] = None
    primary_entity: Optional[str] = None
    group: Optional[str] = None


class UnitTestInputFixture1(UnitTestInputFixture):
    pass


class UnitTestOutputFixture1(UnitTestOutputFixture):
    pass


class UnitTestDefinition1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    model: str
    given: List[UnitTestInputFixture1]
    expect: UnitTestOutputFixture1 = Field(..., title='UnitTestOutputFixture')
    name: str
    resource_type: ResourceType
    package_name: str
    path: str
    original_file_path: str
    unique_id: str
    fqn: List[str]
    description: Optional[str] = ''
    overrides: Optional[UnitTestOverrides] = None
    depends_on: Optional[DependsOn15] = Field(None, title='DependsOn')
    config: Optional[UnitTestConfig] = Field(None, title='UnitTestConfig')
    checksum: Optional[str] = None
    schema_: Optional[str] = Field(None, alias='schema')
    created_at: Optional[float] = None
    versions: Optional[UnitTestNodeVersions] = None
    version: Optional[Union[str, float]] = None


class WritableManifest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metadata: ManifestMetadata = Field(
        ..., description='Metadata about the manifest', title='ManifestMetadata'
    )
    nodes: Dict[
        str,
        Union[
            Seed,
            Analysis,
            SingularTest,
            HookNode,
            Model,
            SqlOperation,
            GenericTest,
            Snapshot,
        ],
    ] = Field(
        ..., description='The nodes defined in the dbt project and its dependencies'
    )
    sources: Dict[str, SourceDefinition] = Field(
        ..., description='The sources defined in the dbt project and its dependencies'
    )
    macros: Dict[str, Macro] = Field(
        ..., description='The macros defined in the dbt project and its dependencies'
    )
    docs: Dict[str, Documentation] = Field(
        ..., description='The docs defined in the dbt project and its dependencies'
    )
    exposures: Dict[str, Exposure] = Field(
        ..., description='The exposures defined in the dbt project and its dependencies'
    )
    metrics: Dict[str, Metric] = Field(
        ..., description='The metrics defined in the dbt project and its dependencies'
    )
    groups: Dict[str, Group] = Field(
        ..., description='The groups defined in the dbt project'
    )
    selectors: Dict[str, Any] = Field(
        ..., description='The selectors defined in selectors.yml'
    )
    disabled: Optional[
        Dict[
            str,
            List[
                Union[
                    Seed1,
                    Analysis1,
                    SingularTest1,
                    HookNode1,
                    Model1,
                    SqlOperation1,
                    GenericTest1,
                    Snapshot1,
                    SourceDefinition1,
                    Exposure1,
                    Metric1,
                    SavedQuery,
                    SemanticModel,
                    UnitTestDefinition,
                ]
            ],
        ]
    ] = Field(..., description='A mapping of the disabled nodes in the target')
    parent_map: Optional[Dict[str, List[str]]] = Field(
        ..., description='A mapping from\xa0child nodes to their dependencies'
    )
    child_map: Optional[Dict[str, List[str]]] = Field(
        ..., description='A mapping from parent nodes to their dependents'
    )
    group_map: Optional[Dict[str, List[str]]] = Field(
        ..., description='A mapping from group names to their nodes'
    )
    saved_queries: Dict[str, SavedQuery1] = Field(
        ..., description='The saved queries defined in the dbt project'
    )
    semantic_models: Dict[str, SemanticModel1] = Field(
        ..., description='The semantic models defined in the dbt project'
    )
    unit_tests: Dict[str, UnitTestDefinition1] = Field(
        ..., description='The unit tests defined in the project'
    )
